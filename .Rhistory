library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
setwd("~/Bildung/Technische Universit√§t Berlin/Master/Auslandssemester/Courses/BAN400/Assignments/Assignment 6 - Iterations/iterations-maltekasiske")
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
View(stations_metadata)
str(stations_metadata)
View(stations_metadata)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
View(stations_metadata)
str(stations_metadata)
library(purrr)
library(purrr)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
class(stations_metadata)
View(stations_metadata)
str(stations_metadata)
transform_metadata_to_df <- function(metadata_list) {
# Extract the trafficRegistrationPoints list
traffic_points_list <- metadata_list$trafficRegistrationPoints
# Create an empty data frame to store the results
result_df <- data.frame()
# Iterate over each element in the traffic points list
for (point in traffic_points_list) {
# Extract data from the current point
id <- point$id
name <- point$name
latest_data <- point$latestData$volumeByHour
lat <- point$location$coordinates$latLon$lat
lon <- point$location$coordinates$latLon$lon
# Create a data frame for the current point
point_df <- data.frame(id, name, latest_data, lat, lon)
# Append the point data frame to the result data frame
result_df <- rbind(result_df, point_df)
}
# Convert the latest_data column to POSIXct in UTC
result_df$latest_data <- anytime(result_df$latest_data)
return(result_df)
}
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
View(stations_metadata_df)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
View(stations_metadata_df)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
View(stations_metadata_df)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(purrr)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
# Let's try submitting the query:
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
#### 2: Transforming metadata
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(purrr)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
# Let's try submitting the query:
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
#### 2: Transforming metadata
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
to_iso8601 <- function(datetime, offset) {
# Convert the input datetime to an ISO8601 string with the offset
iso_datetime <- as.character(datetime + lubridate::days(offset))
# Append "Z" to indicate UTC time zone
iso8601 <- paste(iso_datetime, "Z", sep = "")
return(iso8601)
}
# Test the to_iso8601 function with examples
to_iso8601(as_datetime("2016-09-01 10:11:12"), 0)  # Expected: "2016-09-01T10:11:12Z"
to_iso8601(as_datetime("2016-09-01 10:11:12"), -4)  # Expected: "2016-08-28T10:11:12Z"
# Task 4b - Creating the vol_qry function
vol_qry <- function(id, from, to) {
query <- glue::glue("
{{
trafficData(trafficRegistrationPointId: \"{id}\") {{
volume {{
byHour(from: \"{from}\", to: \"{to}\") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
", .open = "", .close = "")
return(query)
}
# Test the vol_qry function with an example query
sample_query <- vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)
)
print(sample_query)
# Test the vol_qry function with an example query
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue::glue("{{trafficData(trafficRegistrationPointId: \"{id}\") {{
volume {{
byHour(from: \"{from}\", to: \"{to}\") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}")
return(query)
}
# Test the vol_qry function with an example query
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
to_iso8601 <- function(dt, offset) {
dt <- anytime(dt) + days(offset)
dt <- format(dt, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC")
return(dt)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
source("gql-queries/vol_qry.r")
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
source("gql-queries/vol_qry.r")
